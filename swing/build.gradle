plugins {
    id "com.github.johnrengelman.shadow"
    id 'java'
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'checkstyle'
    id 'org.gradlex.extra-java-module-info' version '1.8'
}

java {
    // Must be disabled in order to use the gradle-modules-plugin
    modularity.inferModulePath = false
}

Properties props = new Properties()
try {
    props.load(file('../core/src/main/resources/build.properties').newDataInputStream())
} catch (Exception ex) {
    throw new Exception("Missing build.properties. file: " + ex.getMessage())
}
version = props['build.version']

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "https://jogamp.org/deployment/maven/" }
}

checkstyle {
    ignoreFailures = false
    maxWarnings = 0
}

configurations {
    testArtifactsClasspath {
        canBeConsumed = false
        canBeResolved = true
    }
}

// Some older libraries are not modularized, so we need to add module-info.java files for them.
extraJavaModuleInfo {
    failOnMissingModuleInfo.set(false)
    module('slf4j-api-1.7.25.jar', 'org.slf4j.api', '1.7.25')
    module('slf4j-api-1.7.32.jar', 'org.slf4j.api', '1.7.32')
    module('versioncompare-1.5.0.jar', 'versioncompare', '1.5.0')
    module('gluegen-rt-2.5.0.jar', 'org.jogamp.gluegen.rt', '2.5.0') {
        requires('java.desktop')
        exportAllPackages()
    }
    module('jogl-all-2.5.0.jar', 'org.jogamp.jogl.all', '2.5.0') {
        requires('java.desktop')
        requires('org.jogamp.gluegen.rt')
        exportAllPackages()
    }
    module('jcommon-1.0.24.jar', 'jcommon', '1.0.24') {
        requires('java.desktop')
        exportAllPackages()
    }
    module('itextpdf-5.5.13.3.jar', 'itextpdf', '5.5.13.3') {
        requires('java.desktop')
        exportAllPackages()
    }

    module('obj-0.4.0.jar', 'de.javagl.obj', '0.4.0')
}

dependencies {
    implementation project(':core')

    implementation 'de.javagl:obj:0.4.0'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.12'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation group: 'org.commonmark', name: 'commonmark', version: '0.19.0' // 0.21.0
    implementation group: 'com.google.inject', name: 'guice', version: '7.0.0'
    implementation group: 'com.itextpdf', name: 'itextpdf', version: '5.5.13.3'
    implementation group: 'org.jfree', name: 'jcommon', version: '1.0.24'
    implementation group: 'org.jfree', name: 'jfreechart', version: '1.5.4'
    implementation group: 'com.miglayout', name: 'miglayout-core', version: '11.0'
    implementation group: 'com.miglayout', name: 'miglayout-swing', version: '11.0'
    implementation group: 'com.fifesoft', name: 'rsyntaxtextarea', version: '3.4.0'

    implementation 'com.github.weisj:darklaf-core:3.0.2'

    implementation group: 'io.github.g00fy2', name: 'versioncompare', version: '1.5.0'
    implementation 'com.github.Dansoftowner:jSystemThemeDetector:3.8'

//    implementation 'net.java.dev.jna:jna:5.13.0'
//    implementation 'net.java.dev.jna:jna-platform:5.13.0'
//    implementation 'de.jangassen:jfa:1.2.0'

//    implementation 'com.github.oshi:oshi-core:6.4.4'

    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.5.0'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.0'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

    implementation group: 'org.jogamp.gluegen', name: 'gluegen-rt-main', version:'2.5.0'
    implementation group: 'org.jogamp.jogl', name: 'jogl-all-main', version: '2.5.0'

    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.0'
}

def externalComponentsPath = './src/main/resources/datafiles/components'
// Copies the external components to the Swing resource folder.
tasks.register('externalComponentsCopy', Copy) {
    group = 'info.openrocket'
    dependsOn 'externalComponentsValidate'
    // gradle always performs up-to-date check which causes copying be skipped.
    from('./resources-src/datafiles/components-openrocket') {
    }
    from('./resources-src/datafiles/components-dbcook/orc') {
    }
    into externalComponentsPath
    exclude '**/*.bak'
    includeEmptyDirs = false
    eachFile { details ->
        println "Copying $details.sourcePath to $details.path ..."
    }
}
// Deletes the external components resource folder.
tasks.register('externalComponentsDelete', Delete) {
    group = 'info.openrocket'
    delete fileTree(externalComponentsPath)
}
// Validates the external components resource folder.  If it is a Git project, then
// calls the submodule updates to fetch the latest submodules.
tasks.register('externalComponentsValidate') {
    group = 'info.openrocket'
    def externalResourceComponents = './resources-src/datafiles/components-dbcook/orc';
    def git = '../.git';
    if (!project.file(externalResourceComponents).exists()) {
//        println "found: ${project.file(externalResourceComponents)}"
        def message = "The component database is now a submodule, and must be included into " +
            "this project to compile and run the app.\n" +
            "\n";
        if (project.file(git).exists()) {
            message +="If you retrieved this code by cloning the openrocket repository, " +
                "the Gradle build will initialize the submodule if missing.\n" +
                "\n" +
                "You can also manually initialize and update the submodule from the command line\n" +
                "% git submodule init\n" +
                "% git submodule update --remote\n" +
                "\n";
            println message
            dependsOn subModuleUpdate
        } else {
            message += "If you retrieved this code by downloading and uncompressing a zip file,\n" +
                "Download the code from https://github.com/dbcook/openrocket-database and uncompress it.\n" +
                "Copy the files and directories under openrocket-database-master into ''./swing/${externalResourceComponents}''\n" +
                "\n";
            println message
            throw new GradleException('Invalid external component resources.')
        }
    }
}

// Initializes the submodules in Git.
tasks.register('submoduleInit') {
    group = 'info.openrocket'
    doLast {
        exec {
            workingDir "../"
            executable 'git'
            args 'submodule', 'init'
        }
        println "Executed submoduleInit!"
    }
}
// Updates the initialized submodules in Git.
tasks.register('subModuleUpdate') {
    group = 'info.openrocket'
    dependsOn 'submoduleInit'
    doLast {
        exec {
            workingDir "../"
            executable 'git'
            args 'submodule', 'update', '--remote'
        }
        println "Executed subModuleUpdate!"
    }
}

clean.dependsOn([externalComponentsDelete])
//compileJava.dependsOn([externalComponentsCopy])
processResources.dependsOn([externalComponentsCopy])
